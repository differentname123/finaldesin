0121：
	成果：
	1.确定了大概声音收集的框架，即采用VS1053作为主芯片，进行音频采集

	疑问：
	1.战舰V3配套的是wav格式，我需要的是pcm裸数据

	下一步：
	1.声音文件识别的优化与封装
	2.架构出采集到数据的转存与发送结构
0123：
	成果：
	1.完成了关键字提取代码的编写

	疑问：
	1.不知到单片机是否能直接上传文件给服务端
	
	下一步：
	1.完成服务端，文件的转写和关键字提取的整合

0128：
	成果：
	1.完成服务端的大体架构，及开三个线程，并完成了一部分pcm转string线程的代码和文件接收代码
	疑问：
	1.还未接触pcm文件上传的咨询，心里没底
	下一步：
	1.完成服务端除pcm接收的代码

0219：
	成果：
	1.重新开始工作	
	下一步： 
	1.关键字的提取（正则表达）和总结
	2.利用datainputstream （与文件类型无关的流）完成pcm文件的发送与接收，完成后直接移植放到核心板上
0220：
	成果：
	1.完成关键字的提取
	下一步：
	1.明天早上完成三个线程的所有配合
	2.下午完成pcm文件的传输，并利用单片机采集声音
0228：
	成果：
	1.上传到gitbhub对项目进行了更加合理的管理
	2.完成了智能策略的构思并且实现了策略一（挖掘待做的事情）
	下一步：
	1.接着完成其他两大策略（情绪图，关键词 词云）

0301：
	成果：
	1.完成情绪数据的分析存储
	2.将文件操作规范了一下，用文件工具类来管理

	下一步：
	1.第一个语音转str的准确率应该要提高（比如采用两次提交，选择其中好的作为结果）
	2.玩成第三个策略的编写（思路：写一个接口，能分析出最近x时间内的n大关键词，并给出权重）

0302：
	成果：
	1.完成了第三策略（最近time时间内的前k关键词）
	2.进行了两次语音识别提交的编写（但速度太慢）
	下一步：
	1.收集足够pcm文件包括大小不同的，内容不同（需要有满足策略1的内容（表未来待做的事））
	2.收集足够多的音频文件开始进行已有模块的测试（主要是测语音识别），并且得到几组不同情况的最优解（比如音频文件在100kb以下的延时和分片大小组合）

0303：
	成果：
	1.完成了终端需求的分析和整体架构（即四大界面）
	2.完成了语音识别的测试代码（找到最合适的分片和延时比例），但pcm用例不足
	3.完成了终端和服务端关键字获取和心情值获取两个功能（写好了相应代码并测试）
	下一步：
	1.完成个人报告所需数据（最多的词  最多话的时间点 最沉默的时间 各大词性的个数和比例）的生成分析
	2.完成终端和服务端其他两个功能（预测的事件获取   个人报告）的打通
0304：
	成果：
	1.录制了新的pcm测试文件
	2.完成了服务端和终端四大功能（数据也分析出来了）的请求与相应
	3.运行了android studio的图表开源项目
	下一步：
	1.把各个模块开源项目成功运行，然后再综合。
	2.理清单片机的音频采集功能
0305：
	成果：
	1.完成wav转pcm编写
	下一步：
	1.全力搞终端的编写，主要是各个UI的使用组合
	2.然后板子存储卡到了之后就收集发送数据
0307：
	成果：
	1.完成了MAPUI的编译运行
	2.完成了Android这边的通信（存在主线程运行报错的问题）
	3.编写并运行了自己的线性图表
	下一步：
	1.先把图表调成自己看起来好看的样子（背景，线条，坐标点颜色等参数）
	2.再把数据配合起来生成真实图表
	3.实现菜单ui完成心情这个模块的全部功能
0308：
	成果：
	1.完成了心情界面的调整
	2.完成了心情值的影射和绘制
	3.完成了绘制心情曲线功能
	下一步：
	1.完成词云功能的实现

0315：
	成果：
	1.完成自定义形状的词云
	2.完成词云的生成和通信
	下一步：
	1.把功能写进服务端，拉通测试
	2.功能写进客户端，并且展示出来
	3.完成不同心情的不同形状逻辑
0316：
	成果：
	1.完成词云的传输
	下一步：
	1.修改词云的形状和安卓界面展示的背景
0317：
	成果：
	1.想出了大概词云细节优化
	下一步：
	1.以关键词个数来选择不同的轮廓图
	2.每个次数下放几种图片，随机展示
0418：
	成果：
	1.完成通信，模块的连接
	下一步：
	1.尝试传输文件
	2.将声音录制下来
0503：
	成果：
	1.实现了声音数据的传输
	2.将声音采集和通信集成了
	下一步：
	1.声音采集的策略（问题：数据传输很缓慢，基本传输时间和录制时间相等，怎样才能不丢失数据在传输和采集协调）
		可以尝试采集传输分离，当用户点击某一按键时才进行上传，其他时间就进行采集（记录一个已经发送的数值，然后进行发送判断）
	2.解决声音传输会有损失造成最后数据有时候全是杂音（分段采集）

	3.实现服务端真正的接收处理
0506：
	成果：
	1.进行了一次整体功能的梳理，完成了中期报告
	2.确定了以中期报告为大体框架完成毕业论文的编写（只需要将细节添加进去就行了）
	下一步:
	1.完成感知层这边的收尾，实现好采集和上传的功能，然后投入到客户端的四大功能的合并
0511：
	成果:
	1.完成单片机时间的请求和录制指定时长录音文件

0512：
	成果：
	1.完成服务端wav串口数据接收，转换和保存
	2.增加通过按键自动控制录音和自动上传
	下一步：
	1.完成客户端的各功能的实现和合并
0513：
	成果:
	1.增加指定类型句子的返回
	2.想好了第三功能的策略
	下一步：
	1.实现界面的滑动
0514:
	成果：
	1.完成ui优化需求的安排
	2.完成预测智能推荐数据的准备
	下一步:
	1.完成客户端和安卓第三（推荐图片数据接口还没实现），第四功能的展示
	2.开始写论文和ppt的制作
0515:
	成果：
	1.完成future界面的布局可处理
	下一步:
	1.修复future图片和描述不一定对应的问题    笑话模块和上面推荐的分离展示
	2.完成report界面话术的展示
	3.增加心情界面的分析文字(在服务端存储相应的话术)和励志文字的显示

	4.词云功能图片展示的大小调整，和toast语句的显示
	5.调整标题颜色和四个功能的图标和名字
	6.看能否在report功能增加音乐播放功能
	7.report功能看能不能把标题栏不显示
0516:
	成果:
	1.修复future图片和描述不一定对应的问题    笑话模块和上面推荐的分离展示
	2.完成report界面话术的展示
	3.增加心情界面的分析文字(在服务端存储相应的话术)和励志文字的显示
	
	下一步：
	1.词云功能图片展示的大小调整，和toast语句的显示

	2.调整标题颜色和四个功能的图标和名字
	3.看能否在report功能增加音乐播放功能
	4.report功能看能不能把标题栏不显示
0517：
	成果:
	1.词云功能图片展示的大小调整，和toast语句的显示
	下一步:
	1.尝试在词云展示本来的轮廓图，方便比较观看
	2.调整标题颜色和四个功能的图标和名字
	3.cloud两个text的添加
	4.应用图标的设置
	5.界面三风格的统一

	//6.看能否在report功能增加音乐播放功能
	//7.report功能看能不能把标题栏不显示
	// 8.字体的设置
	9.饼状图有些字符能不全部显示的bug 还有饼状图下面空白的利用
0518：
	成果:
	1.尝试在词云展示本来的轮廓图，方便比较观看
	2.调整标题颜色和四个功能的图标和名字
	3.cloud两个text的添加
	4.应用图标的设置
	5.界面三风格的统一
	6.饼状图有些字符能不全部显示的bug 还有饼状图下面空白的利用
	下一步:
	1.完成相应的测试工作，并做好数据记录
